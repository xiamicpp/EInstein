package ${packageName};##

#foreach($import in ${imports})##
import $import;
#end##
#parse("template/entity/java/comment.vm")

public class ${entityName} implements ${mutableInterface}{

#foreach($field in ${childfields})
    #if(${field.isList()})
    private java.util.List<${field.decorateType}> m_${field.name};
    #else
    private ${field.decorateType} m_${field.name};
    #end
    private volatile boolean m_field_${field.name};
#end

#if(${hasSupperClass})
    private ${supperClassMutableInterface} m_parent;
#end
    private ${pbClassType}.Builder m_builder = ${pbBuilder}.newBuilder();

#####################################################################
## field method
#####################################################################
#foreach(${field} in ${childfields})##
##get method
@Override
#if(${field.isList()})##
public java.util.List<${field.decorateType}> get${field.decorateMethod}(){
#else##
public ${field.decorateType} get${field.decorateMethod}(){
#end##
return m_${field.name};
}
##set method
#if(${field.isList()})##
protected void __set${field.decorateMethod}(java.util.List<${field.decorateType}> value){
##if(${field.isEProtoObject()})#set($pValue="((${field.decorateType2})value).builder()")#else#set($pValue = "value")#end
for(${field.decorateType} item: value){
m_builder.add${field.decorateMethod}(item)
}
#else##
protected void __set${field.decorateMethod}(${field.decorateType} value){
##if(${field.isEProtoObject()})#set($pValue="((${field.decorateType2})value).builder()")#else#set($pValue = "value")#end
m_builder.set${field.decorateMethod}(value);
#end##
this.m_${field.name} = value;
}
#end##

#foreach(${field} in ${supperFields})##
##get method
@Override
#if(${field.isList()})##
public java.util.List<${field.decorateType}> get${field.decorateMethod}(){
#else
public ${field.decorateType} get${field.decorateMethod}(){
#end
return getParent().get${field.decorateMethod}();
}
##set method
#if(${field.isList()})
protected void __set${field.decorateMethod}(java.util.List<${field.decorateType}> value){
#else
protected void __set${field.decorateMethod}(${field.decorateType} value){
#end
getParentMutable().set${field.decorateMethod}(value);
}
#end
###################################################################

###################################################################
## getParent mutable and immutbale
#if(${hasSupperClass})##
private ${supperClassImmutableInterface} getParent(){
if(null==m_parent){
m_parent = new ${supperMutableClass}();
}
return m_parent;
}

private ${supperClassMutableInterface} getParentMutable(){
return (${supperClassMutableInterface})getParent();
}
#end##


## toString
@Override
public String toString() {
StringBuilder sb = new StringBuilder();
sb.append("[EPROTO OBJECT]:{")
.append("Data:")
#foreach(${field} in ${childfields})##
.append(m_${field.name}).append(",")
#end
#if(${hasSupperClass})##
.append(" supper: ")
.append(m_parent.toString())
#end
.append("}");
return sb.toString();
}

}

